---

import Icon from '@/components/block/Icon.astro';

interface Props {
  repo: string; // Required property
  size?: 'default' | 'sm' | 'lg';
  stars?: number; // Star count (fallback)
}

const { repo,
  size = "default",
  stars = 0
 } = Astro.props;

// Size-based classes
const sizeClasses = {
  sm: {
    container: "text-xs",
    padding: "px-2 py-1",
    gap: "gap-1",
    icon: "w-3 h-3",
    text: "text-xs font-medium"
  },
  default: {
    container: "text-sm",
    padding: "px-3 py-2",
    gap: "gap-2",
    icon: "w-4 h-4",
    text: "text-sm font-medium"
  },
  lg: {
    container: "text-base",
    padding: "px-4 py-3",
    gap: "gap-3",
    icon: "w-5 h-5",
    text: "text-base font-semibold"
  }
};

const currentSize = sizeClasses[size];

---
<div class={`inline-flex rounded-md overflow-hidden border border-gray-700 ${currentSize.container}`} data-github-stars data-repo={repo}>
  <!-- Left section: Star button -->
  <div class={`flex items-center ${currentSize.gap} ${currentSize.padding} bg-gray-700 text-white`}>
    <Icon name="octicon-star" class={`text-white ${currentSize.icon}`}/>
    <span class={currentSize.text}>Star</span>
  </div>
  
  <!-- Right section: Star count -->
  <div class={`flex items-center ${currentSize.padding} bg-black text-white`}>
    <span class={`${currentSize.text} star-count`} data-fallback={stars}>
      {stars > 0 ? stars.toLocaleString() : '...'}
    </span>
  </div>
</div>

<script>
  // Function to fetch GitHub stars for a repository
  async function fetchGitHubStars(repo: string): Promise<number | null> {
    try {
      const response = await fetch(`https://api.github.com/repos/${repo}`);
      if (!response.ok) {
        throw new Error(`GitHub API responded with status: ${response.status}`);
      }
      const data = await response.json();
      return data.stargazers_count;
    } catch (error) {
      console.error(`Failed to fetch stars for ${repo}:`, error);
      return null;
    }
  }

  // Function to update star count in the DOM
  function updateStarCount(element: HTMLElement, count: number) {
    const starCountElement = element.querySelector('.star-count') as HTMLElement;
    if (starCountElement) {
      starCountElement.textContent = count.toLocaleString();
    }
  }

  // Initialize GitHub stars fetching for all components on the page
  async function initGitHubStars() {
    const elements = document.querySelectorAll('[data-github-stars]');
    
    for (const element of elements) {
      const repo = element.getAttribute('data-repo');
      if (!repo) continue;

      const starCount = await fetchGitHubStars(repo);
      if (starCount !== null) {
        updateStarCount(element as HTMLElement, starCount);
      } else {
        // Fallback to the provided stars prop if API fails
        const fallback = element.querySelector('.star-count')?.getAttribute('data-fallback');
        if (fallback && parseInt(fallback) > 0) {
          updateStarCount(element as HTMLElement, parseInt(fallback));
        } else {
          // Show error state
          const starCountElement = element.querySelector('.star-count') as HTMLElement;
          if (starCountElement) {
            starCountElement.textContent = 'N/A';
          }
        }
      }
    }
  }

  // Run when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGitHubStars);
  } else {
    initGitHubStars();
  }
</script>

