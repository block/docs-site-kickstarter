---
import { cn } from "@/lib/utils";

export interface Props {
  defaultValue?: string;
  className?: string;
  id?: string;
}

const { defaultValue, className = '', id = `tabs-${Math.random().toString(36).substr(2, 9)}` } = Astro.props;
---

<div class={cn("border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden mb-6 mt-6", className)} id={id} data-default-value={defaultValue}>
  <slot />
</div>

<script>
  // Initialize tabs when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    const tabsContainers = document.querySelectorAll('[data-default-value]');
    
    tabsContainers.forEach(container => {
      const defaultValue = container.getAttribute('data-default-value');
      
      // Add click event listeners to all tab triggers
      const triggers = container.querySelectorAll('[role="tab"]');
      triggers.forEach(trigger => {
        trigger.addEventListener('click', (e) => {
          e.preventDefault();
          const targetValue = trigger.getAttribute('data-value');
          if (targetValue && !trigger.disabled) {
            activateTab(container, targetValue);
          }
        });
        
        // Add keyboard navigation
        trigger.addEventListener('keydown', (e) => {
          const currentIndex = Array.from(triggers).indexOf(trigger);
          let nextIndex = currentIndex;
          
          switch (e.key) {
            case 'ArrowRight':
            case 'ArrowDown':
              e.preventDefault();
              nextIndex = (currentIndex + 1) % triggers.length;
              break;
            case 'ArrowLeft':
            case 'ArrowUp':
              e.preventDefault();
              nextIndex = (currentIndex - 1 + triggers.length) % triggers.length;
              break;
            case 'Home':
              e.preventDefault();
              nextIndex = 0;
              break;
            case 'End':
              e.preventDefault();
              nextIndex = triggers.length - 1;
              break;
            case 'Enter':
            case ' ':
              e.preventDefault();
              const targetValue = trigger.getAttribute('data-value');
              if (targetValue && !trigger.disabled) {
                activateTab(container, targetValue);
              }
              return;
            default:
              return;
          }
          
          const nextTrigger = triggers[nextIndex];
          if (nextTrigger && !nextTrigger.disabled) {
            nextTrigger.focus();
          }
        });
      });
      
      // Set initial state
      if (defaultValue) {
        activateTab(container, defaultValue);
      } else if (triggers.length > 0) {
        // If no default value, activate the first non-disabled tab
        const firstEnabledTrigger = Array.from(triggers).find(t => !t.disabled);
        if (firstEnabledTrigger) {
          const firstValue = firstEnabledTrigger.getAttribute('data-value');
          if (firstValue) {
            activateTab(container, firstValue);
          }
        }
      }
    });
  });
  
  function activateTab(container, value) {
    // Reset all tabs
    const allTriggers = container.querySelectorAll('[role="tab"]');
    const allContents = container.querySelectorAll('[role="tabpanel"]');
    
    allTriggers.forEach(trigger => {
      trigger.setAttribute('aria-selected', 'false');
      trigger.setAttribute('tabindex', '-1');
      trigger.setAttribute('data-state', 'inactive');
    });
    
    allContents.forEach(content => {
      content.setAttribute('aria-selected', 'false');
      content.setAttribute('hidden', '');
    });
    
    // Activate target tab
    const targetTrigger = container.querySelector(`[data-value="${value}"]`);
    const targetContent = container.querySelector(`[data-content-value="${value}"]`);
    
    if (targetTrigger && targetContent) {
      targetTrigger.setAttribute('aria-selected', 'true');
      targetTrigger.setAttribute('tabindex', '0');
      targetTrigger.setAttribute('data-state', 'active');
      
      targetContent.setAttribute('aria-selected', 'true');
      targetContent.removeAttribute('hidden');
    }
  }
</script>
