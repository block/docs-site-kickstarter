---

import Icon from '@/components/block/Icon.astro';

interface Props {
  repo?: string; // Required for stars/forks types
  account?: string; // Required for followers type
  type?: 'stars' | 'forks' | 'followers'; // Type of stat to show
  size?: 'default' | 'sm' | 'lg';
}

const { repo,
  account,
  type = "stars",
  size = "default"
 } = Astro.props;

// Determine the identifier to use based on type
const identifier = type === "followers" ? account : repo;

// Size-based classes
const sizeClasses = {
  sm: {
    container: "text-xs",
    padding: "px-2 py-1",
    gap: "gap-1",
    icon: "w-3 h-3",
    text: "text-xs font-medium"
  },
  default: {
    container: "text-sm",
    padding: "px-3 py-2",
    gap: "gap-2",
    icon: "w-4 h-4",
    text: "text-sm font-medium"
  },
  lg: {
    container: "text-base",
    padding: "px-4 py-3",
    gap: "gap-3",
    icon: "w-5 h-5",
    text: "text-base font-semibold"
  }
};

const currentSize = sizeClasses[size];

// Dynamic content based on type
const getIconName = (type: string) => {
  switch (type) {
    case "stars": return "octicon-star";
    case "forks": return "octicon-fork";
    case "followers": return "octicon-github";
    default: return "octicon-star";
  }
};

const getButtonText = (type: string) => {
  switch (type) {
    case "stars": return "Stars";
    case "forks": return "Forks";
    case "followers": return "Followers";
    default: return "Stars";
  }
};

const iconName = getIconName(type);
const buttonText = getButtonText(type);

---
<div class={`inline-flex rounded-md overflow-hidden border border-gray-700 ${currentSize.container}`} data-github-stats data-identifier={identifier} data-type={type}>
  <!-- Left section: Action button -->
  <div class={`flex items-center ${currentSize.gap} ${currentSize.padding} bg-gray-700 text-white`}>
    <Icon name={iconName} class={`text-white ${currentSize.icon}`}/>
    <span class={currentSize.text}>{buttonText}</span>
  </div>
  
  <!-- Right section: Count -->
  <div class={`flex items-center ${currentSize.padding} bg-black text-white`}>
    <span class={`${currentSize.text} stat-count`}>
      ...
    </span>
  </div>
</div>

<script>
  // Function to fetch GitHub repository stats
  async function fetchGitHubStats(repo: string, type: string): Promise<number | null> {
    try {
      let response;
      
      if (type === 'followers') {
        // For followers, use the users API endpoint
        response = await fetch(`https://api.github.com/users/${repo}`);
      } else {
        // For stars and forks, use the repos API endpoint
        response = await fetch(`https://api.github.com/repos/${repo}`);
      }
      
      if (!response.ok) {
        throw new Error(`GitHub API responded with status: ${response.status}`);
      }
      
      const data = await response.json();
      
      switch (type) {
        case 'stars':
          return data.stargazers_count;
        case 'forks':
          return data.forks_count;
        case 'followers':
          return data.followers;
        default:
          return null;
      }
    } catch (error) {
      console.error(`Failed to fetch ${type} for ${repo}:`, error);
      return null;
    }
  }

  // Function to update stat count in the DOM
  function updateStatCount(element: HTMLElement, count: number) {
    const statCountElement = element.querySelector('.stat-count') as HTMLElement;
    if (statCountElement) {
      statCountElement.textContent = count.toLocaleString();
    }
  }

  // Initialize GitHub stats fetching for all components on the page
  async function initGitHubStats() {
    const elements = document.querySelectorAll('[data-github-stats]');
    
    for (const element of elements) {
      const identifier = element.getAttribute('data-identifier');
      const type = element.getAttribute('data-type') || 'stars';
      if (!identifier) continue;

      const statCount = await fetchGitHubStats(identifier, type);
      if (statCount !== null) {
        updateStatCount(element as HTMLElement, statCount);
      } else {
        // Show error state if API fails
        const statCountElement = element.querySelector('.stat-count') as HTMLElement;
        if (statCountElement) {
          statCountElement.textContent = 'N/A';
        }
      }
    }
  }

  // Run when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGitHubStats);
  } else {
    initGitHubStats();
  }
</script>

