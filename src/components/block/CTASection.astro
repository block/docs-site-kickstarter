---
import { getUrlRelativeToBase } from '@/lib/utils';
import Icon from '@/components/block/Icon.astro';

interface Props {
  title?: string;
  tagline?: string;
  taglineIconName?: any;
  description?: string;
  primaryButtonText?: string;
  primaryButtonHref?: string;
  primaryButtonIconName?: any;
  secondaryButtonText?: string;
  secondaryButtonHref?: string;
  secondaryButtonIconName?: any;
  variant?: 'default' | 'dark' | 'gradient' | 'bordered';
  layout?: 'centered' | 'split';
  className?: string;
}

const { 
  title = "Action-driving headline that creates urgency",
  tagline = "Call to action",
  taglineIconName,
  description = "Add one or two compelling sentences that reinforce your main value proposition and overcome final objections. End with a clear reason to act now.",
  primaryButtonText,
  primaryButtonHref = "#",
  primaryButtonIconName,
  secondaryButtonText,
  secondaryButtonHref = "#",
  secondaryButtonIconName,
  variant = 'default',
  layout = 'centered',
  className = '',
} = Astro.props;

const sectionClasses = [
  'cta-section',
  `variant-${variant}`,
  `layout-${layout}`,
  className
].filter(Boolean).join(' ');

const titleClasses = "text-4xl md:text-6xl font-black pb-1 m-0 bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent";
---

<section class={sectionClasses}>
  <div class="container mx-auto px-6 py-8">
    {layout === 'centered' && (
      <div class="cta-centered-content">
        {tagline && (
          <div class="cta-tagline">
            {taglineIconName && (
              <div class="cta-tagline-icon"><Icon name={taglineIconName} /></div>
            )}
            {tagline}
          </div>
        )}
        
        {title && (
          <h1 class={titleClasses}>
            {title}
          </h1>
        )}
        
        {description && (
          <p class="cta-description">
            {description}
          </p>
        )}
        
        <div class="cta-actions">
          {primaryButtonText && (
            <a href={getUrlRelativeToBase(primaryButtonHref)} class="cta-button primary">
              {primaryButtonIconName && (
                <Icon name={primaryButtonIconName} />
              )}
              {primaryButtonText}
            </a>
          )}
          
          {secondaryButtonText && (
            <a href={getUrlRelativeToBase(secondaryButtonHref)} class="cta-button secondary">
              {secondaryButtonIconName && (
                <Icon name={secondaryButtonIconName} />
              )}
              {secondaryButtonText}
            </a>
          )}
          
          <!-- Custom slot for additional actions -->
          <div class="cta-custom-actions">
            <slot />
          </div>
        </div>
      </div>
    )}
    
    {layout === 'split' && (
      <div class="cta-centered-content">
      { tagline && (
        <div class="cta-tagline">
          {taglineIconName && (
              <div class="cta-tagline-icon"><Icon name={taglineIconName} /></div>
            )}
          {tagline}
        </div>
      )}
      </div>

      <div class="cta-split-content pt-4">

        <div class="cta-text-content">
          
          {title && (
            <h1 class={titleClasses}>
              {title}
            </h1>
          )}
          
          {description && (
            <p class="cta-description">
              {description}
            </p>
          )}
        </div>
        
        <div class="cta-actions">
          {primaryButtonText && (
            <a href={getUrlRelativeToBase(primaryButtonHref)} class="cta-button primary">
              {primaryButtonIconName && (
                <Icon name={primaryButtonIconName} />
              )}
              {primaryButtonText}
            </a>
          )}
          
          {secondaryButtonText && (
            <a href={getUrlRelativeToBase(secondaryButtonHref)} class="cta-button secondary">
              {secondaryButtonIconName && (
                <Icon name={secondaryButtonIconName} />
              )}
              {secondaryButtonText}
            </a>
          )}
          
          <!-- Custom slot for additional actions -->
          <div class="cta-custom-actions">
            <slot />
          </div>
        </div>
      </div>
    )}
  </div>
</section>

<style>
  .cta-section {
    position: relative;
    overflow: hidden;
  }
  
  /* Variants */
  .cta-section.variant-default {
    background: hsl(var(--background));
    color: hsl(var(--foreground));
  }
  
  .cta-section.variant-dark {
    background: hsl(var(--foreground));
    color: hsl(var(--background));
  }
  
  .cta-section.variant-gradient {
    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary) / 0.8) 100%);
    color: hsl(var(--primary-foreground));
  }
  
  .cta-section.variant-bordered {
    background: hsl(var(--background));
    color: hsl(var(--foreground));
    border: 1px solid hsl(var(--border));
    border-radius: 1rem;
    margin: 2rem 0;
  }
  
  /* Layout Styles */
  .cta-centered-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    max-width: 768px;
    margin: 0 auto;
    gap: 2rem;
  }
  
  .cta-split-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 4rem;
    max-width: 1280px;
    margin: 0 auto;
  }
  
  .cta-text-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  /* Typography */
  .cta-tagline {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
    background: hsl(var(--muted));
    color: hsl(var(--foreground));
    border: 1px solid hsl(var(--border));
    width: fit-content;
  }

  .cta-tagline .cta-tagline-icon {
    padding-right: .5rem;
  }
  
  .variant-dark .cta-tagline {
    background: hsl(var(--background) / 0.1);
    color: hsl(var(--background) / 0.8);
    border-color: hsl(var(--background) / 0.2);
  }
  
  .variant-gradient .cta-tagline {
    background: hsl(var(--primary-foreground) / 0.1);
    color: hsl(var(--primary-foreground) / 0.9);
    border-color: hsl(var(--primary-foreground) / 0.2);
  }
  
  .cta-centered-content .cta-tagline {
    align-self: center;
  }
  
  .cta-title {

  }
  
  .cta-description {
    font-size: 1.25rem;
    line-height: 1.6;
    opacity: 0.9;
    margin: 0;
    color: var(--color-muted-foreground);
  }
  
  /* Actions */
  .cta-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .cta-centered-content .cta-actions {
    justify-content: center;
  }
  
  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 2rem;
    border-radius: 0.5rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.2s ease;
    white-space: nowrap;
  }
  
  .cta-button.primary {
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    border: 1px solid hsl(var(--primary));
    box-shadow: 
      0 1px 2px -1px rgba(0, 0, 0, 0.1),
      0 1px 3px 0 rgba(0, 0, 0, 0.1);
  }
  
  .cta-button.primary:hover {
    background: hsl(var(--primary) / 0.9);
    transform: translateY(-1px);
    box-shadow: 
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .cta-button.secondary {
    background: transparent;
    color: hsl(var(--foreground));
    border: 1px solid hsl(var(--border));
  }
  
  .cta-button.secondary:hover {
    background: hsl(var(--muted));
    transform: translateY(-1px);
  }
  
  /* Variant-specific button styles */
  .variant-dark .cta-button.primary {
    background: hsl(var(--background));
    color: hsl(var(--foreground));
    border-color: hsl(var(--background));
  }
  
  .variant-dark .cta-button.primary:hover {
    background: hsl(var(--background) / 0.9);
  }
  
  .variant-dark .cta-button.secondary {
    color: hsl(var(--background));
    border-color: hsl(var(--background) / 0.3);
  }
  
  .variant-dark .cta-button.secondary:hover {
    background: hsl(var(--background) / 0.1);
  }
  
  .variant-gradient .cta-button.primary {
    background: hsl(var(--primary-foreground));
    color: hsl(var(--primary));
    border-color: hsl(var(--primary-foreground));
  }
  
  .variant-gradient .cta-button.primary:hover {
    background: hsl(var(--primary-foreground) / 0.9);
  }
  
  .variant-gradient .cta-button.secondary {
    color: hsl(var(--primary-foreground));
    border-color: hsl(var(--primary-foreground) / 0.3);
  }
  
  .variant-gradient .cta-button.secondary:hover {
    background: hsl(var(--primary-foreground) / 0.1);
  }
  
  .button-icon {
    width: 1rem;
    height: 1rem;
    transition: transform 0.2s ease;
  }
  
  /* Target both class and SVG elements */
  .cta-button svg {
    width: 1rem;
    height: 1rem;
    transition: transform 0.2s ease;
  }
  
  .cta-button:hover .button-icon,
  .cta-button:hover svg {
    transform: translateX(2px);
  }
  
  .cta-custom-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }
  
  /* Responsive Design */
  @media (max-width: 1024px) {
    .cta-split-content {
      flex-direction: column;
      text-align: center;
      gap: 2rem;
    }
    
    .cta-text-content {
      align-items: center;
    }
    
    .cta-tagline {
      align-self: center;
    }
  }
  
  @media (max-width: 768px) {
    .cta-title {
      font-size: 2rem;
    }
    
    .cta-description {
      font-size: 1rem;
    }
    
    .cta-actions {
      flex-direction: column;
      width: 100%;
    }
    
    .cta-button {
      width: 100%;
      justify-content: center;
    }
    
    .cta-custom-actions {
      width: 100%;
      justify-content: center;
    }
  }
  
  @media (max-width: 640px) {
    .cta-title {
      font-size: 1.75rem;
    }
    
    .cta-section .container {
      padding-left: 1rem;
      padding-right: 1rem;
      padding-top: 3rem;
      padding-bottom: 3rem;
    }
  }
  
  /* Global slot content styling */
  .cta-custom-actions :global(.cta-link) {
    color: inherit;
    text-decoration: underline;
    text-underline-offset: 4px;
    transition: opacity 0.2s ease;
  }
  
  .cta-custom-actions :global(.cta-link:hover) {
    opacity: 0.8;
  }
  
  .cta-custom-actions :global(.cta-stats) {
    display: flex;
    gap: 2rem;
    align-items: center;
    font-size: 0.875rem;
    opacity: 0.8;
  }
  
  .cta-custom-actions :global(.cta-stat) {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }
  
  .cta-custom-actions :global(.cta-stat-number) {
    font-size: 1.5rem;
    font-weight: 700;
  }
  
  .cta-custom-actions :global(.cta-stat-label) {
    font-size: 0.75rem;
    opacity: 0.7;
  }
</style>
