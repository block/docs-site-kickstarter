name: Deploy Branch Previews

on:
  push:
    branches: ['**']
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get branch info
        id: branch-info
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
          
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "safe-branch=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
          
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "is-main=true" >> $GITHUB_OUTPUT
          else
            echo "is-main=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Install dependencies
        run: |
          cd docs-infra-prototype
          pnpm install
      
      - name: Configure Astro for branch deployment
        if: steps.branch-info.outputs.is-main == 'false'
        run: |
          cd docs-infra-prototype
          # Create branch-specific config
          cat > astro.config.branch.ts << 'EOF'
          // @ts-check
          import { defineConfig } from "astro/config";
          import react from "@astrojs/react";
          import tailwindcss from "@tailwindcss/vite";
          import mdx from "@astrojs/mdx";
          import remarkGfm from 'remark-gfm';
          import rehypeSlug from 'rehype-slug';
          import rehypeAutolinkHeadings from 'rehype-autolink-headings';

          export default defineConfig({
            site: 'https://block.github.io',
            base: '/docs-site-kickstarter/branch/${{ steps.branch-info.outputs.safe-branch }}', 
            
            integrations: [
              mdx({
                remarkPlugins: [remarkGfm],
                rehypePlugins: [rehypeSlug, rehypeAutolinkHeadings],
              }), 
              react()
            ],
            markdown: {
              remarkPlugins: [remarkGfm],
              rehypePlugins: [rehypeSlug, rehypeAutolinkHeadings],
              shikiConfig: {
                themes: {
                  light: 'github-light',
                  dark: 'github-dark'
                },
                wrap: true,
                defaultColor: 'light'
              }
            },
            vite: {
              plugins: [tailwindcss()],
              resolve: {
                alias: {
                  "@": "/src",
                },
              },
            },
          });
          EOF
          mv astro.config.branch.ts astro.config.ts
      
      - name: Build site
        run: |
          cd docs-infra-prototype
          pnpm build
      
      - name: Deploy main branch to GitHub Pages
        if: steps.branch-info.outputs.is-main == 'true'
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Create deployment directory
          mkdir -p /tmp/gh-pages-content
          
          # Check if gh-pages branch exists and get existing branch content
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "Fetching existing gh-pages content..."
            
            # Stash any local changes to avoid conflicts
            git stash push -m "Temporary stash before gh-pages checkout"
            
            git fetch origin gh-pages
            git checkout gh-pages
            
            # Copy only the branch directory to preserve branch previews
            if [ -d "branch" ]; then
              cp -r branch /tmp/gh-pages-content/
            fi
            
            # Go back to source branch
            git checkout ${{ steps.branch-info.outputs.branch }}
            
            # Restore stashed changes if any
            git stash pop 2>/dev/null || echo "No stash to restore"
          fi
          
          # Prepare the gh-pages content
          rm -rf /tmp/gh-pages-deploy
          mkdir -p /tmp/gh-pages-deploy
          cd /tmp/gh-pages-deploy
          
          # Copy main site content to root
          cp -r $GITHUB_WORKSPACE/docs-infra-prototype/dist/* .
          
          # Restore branch directory if it existed
          if [ -d "/tmp/gh-pages-content/branch" ]; then
            cp -r /tmp/gh-pages-content/branch .
          else
            # Create empty branch directory with index
            mkdir -p branch
            cat > branch/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Branch Previews - docs-site-kickstarter</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      margin: 0; 
                      padding: 40px;
                      background: #f6f8fa;
                  }
                  .container { 
                      max-width: 800px; 
                      margin: 0 auto; 
                      background: white;
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  .header { 
                      border-bottom: 1px solid #e1e5e9; 
                      padding-bottom: 20px; 
                      margin-bottom: 30px; 
                  }
                  .main-link { 
                      display: inline-block; 
                      margin-bottom: 30px; 
                      padding: 12px 24px; 
                      background: #0366d6; 
                      color: white; 
                      text-decoration: none; 
                      border-radius: 6px;
                      font-weight: 500;
                      transition: background-color 0.2s;
                  }
                  .main-link:hover { background: #0256cc; }
                  .empty-state {
                      text-align: center;
                      padding: 40px;
                      color: #586069;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>Branch Previews</h1>
                      <p>Preview deployments for all branches in the docs-site-kickstarter repository.</p>
                      <a href="../" class="main-link">‚Üê Back to Main Site</a>
                  </div>
                  <div class="empty-state">
                      No branch previews available yet.<br>
                      Push to a non-main branch to create a preview.
                  </div>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Deploy to gh-pages
          git init
          git add .
          git commit -m "Deploy main branch to GitHub Pages"
          git push --force https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:gh-pages
          
          echo "üöÄ Main site deployed to: https://block.github.io/docs-site-kickstarter/"
          echo "üìã Branch previews available at: https://block.github.io/docs-site-kickstarter/branch/"
      
      - name: Deploy branch preview
        if: steps.branch-info.outputs.is-main == 'false'
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Create deployment directory
          mkdir -p /tmp/gh-pages-content
          
          # Check if gh-pages branch exists and get existing content
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "Fetching existing gh-pages content..."
            
            # Stash any local changes to avoid conflicts
            git stash push -m "Temporary stash before gh-pages checkout"
            
            git fetch origin gh-pages
            git checkout gh-pages
            
            # Copy everything to temp directory
            cp -r . /tmp/gh-pages-content/ 2>/dev/null || true
            
            # Go back to source branch
            git checkout ${{ steps.branch-info.outputs.branch }}
            
            # Restore stashed changes if any
            git stash pop 2>/dev/null || echo "No stash to restore"
          fi
          
          # Prepare the gh-pages content
          rm -rf /tmp/gh-pages-deploy
          mkdir -p /tmp/gh-pages-deploy
          cd /tmp/gh-pages-deploy
          
          # Copy existing gh-pages content if it exists
          if [ -d "/tmp/gh-pages-content" ]; then
            cp -r /tmp/gh-pages-content/* . 2>/dev/null || true
            # Remove .git directory from copied content
            rm -rf .git
          fi
          
          # Create branch directory and copy new content
          mkdir -p branch/${{ steps.branch-info.outputs.safe-branch }}
          cp -r $GITHUB_WORKSPACE/docs-infra-prototype/dist/* branch/${{ steps.branch-info.outputs.safe-branch }}/
          
          # Create branch index page
          mkdir -p branch
          cat > branch/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Branch Previews - docs-site-kickstarter</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      margin: 0; 
                      padding: 40px;
                      background: #f6f8fa;
                  }
                  .container { 
                      max-width: 800px; 
                      margin: 0 auto; 
                      background: white;
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  .header { 
                      border-bottom: 1px solid #e1e5e9; 
                      padding-bottom: 20px; 
                      margin-bottom: 30px; 
                  }
                  .branch-list { list-style: none; padding: 0; }
                  .branch-item { 
                      margin: 15px 0; 
                      padding: 20px; 
                      border: 1px solid #e1e5e9; 
                      border-radius: 8px;
                      transition: border-color 0.2s;
                  }
                  .branch-item:hover { border-color: #0366d6; }
                  .branch-name { 
                      font-weight: 600; 
                      color: #24292e; 
                      font-size: 16px;
                      margin-bottom: 8px;
                  }
                  .branch-link { 
                      color: #0366d6; 
                      text-decoration: none; 
                      font-weight: 500;
                  }
                  .branch-link:hover { text-decoration: underline; }
                  .main-link { 
                      display: inline-block; 
                      margin-bottom: 30px; 
                      padding: 12px 24px; 
                      background: #0366d6; 
                      color: white; 
                      text-decoration: none; 
                      border-radius: 6px;
                      font-weight: 500;
                      transition: background-color 0.2s;
                  }
                  .main-link:hover { background: #0256cc; }
                  .empty-state {
                      text-align: center;
                      padding: 40px;
                      color: #586069;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>Branch Previews</h1>
                      <p>Preview deployments for all branches in the docs-site-kickstarter repository.</p>
                      <a href="../" class="main-link">‚Üê Back to Main Site</a>
                  </div>
                  <ul class="branch-list" id="branchList">
                      <li class="empty-state">Loading branch previews...</li>
                  </ul>
              </div>
              <script>
                  // Get list of branch directories
                  const branches = [];
          EOF
          
          # Add branch names to the JavaScript
          for dir in branch/*/; do
            if [ -d "$dir" ]; then
              branch_name=$(basename "$dir")
              original_name=$(echo "$branch_name" | sed 's/-/\//g')
              echo "        branches.push({safe: '$branch_name', original: '$original_name'});" >> branch/index.html
            fi
          done
          
          cat >> branch/index.html << 'EOF'
                  
                  const branchList = document.getElementById('branchList');
                  
                  if (branches.length > 0) {
                      branchList.innerHTML = branches.map(branch => `
                          <li class="branch-item">
                              <div class="branch-name">${branch.original}</div>
                              <a href="${branch.safe}/" class="branch-link">View Preview ‚Üí</a>
                          </li>
                      `).join('');
                  } else {
                      branchList.innerHTML = '<li class="empty-state">No branch previews available yet.</li>';
                  }
              </script>
          </body>
          </html>
          EOF
          
          # Initialize git and push to gh-pages
          git init
          git add .
          git commit -m "Deploy branch preview: ${{ steps.branch-info.outputs.branch }}"
          git push --force https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:gh-pages
          
          echo "üîç Branch preview deployed to: https://block.github.io/docs-site-kickstarter/branch/${{ steps.branch-info.outputs.safe-branch }}/"
          echo "üìã All previews available at: https://block.github.io/docs-site-kickstarter/branch/"
