---
interface Props {
  title?: string;
  tagline?: string;
  description?: string;
  image?: string;
  imageAlt?: string;
  imagePosition?: 'left' | 'right';
  layout?: 'split' | 'stacked' | 'centered';
  variant?: 'default' | 'bordered' | 'background';
  className?: string;
  reverse?: boolean;
}

const { 
  title,
  tagline,
  description,
  image,
  imageAlt = '',
  imagePosition = 'right',
  layout = 'split',
  variant = 'default',
  className = '',
  reverse = false,
} = Astro.props;

const sectionClasses = [
  'feature-section',
  `layout-${layout}`,
  `variant-${variant}`,
  reverse && 'reverse',
  className
].filter(Boolean).join(' ');

const isImageLeft = imagePosition === 'left' || reverse;
---

<section class={sectionClasses}>
  <div class="container mx-auto px-6 py-16 lg:py-24">
    {layout === 'split' && (
      <div class="feature-split-layout">
        <div class={`feature-content ${isImageLeft ? 'order-2' : 'order-1'}`}>
          {tagline && (
            <div class="feature-tagline">
              {tagline}
            </div>
          )}
          
          {title && (
            <h2 class="feature-title">
              {title}
            </h2>
          )}
          
          {description && (
            <p class="feature-description">
              {description}
            </p>
          )}
          
          <div class="feature-content-slot">
            <slot />
          </div>
        </div>
        
        {image && (
          <div class={`feature-image-container ${isImageLeft ? 'order-1' : 'order-2'}`}>
            <div class="feature-image">
              <img src={image} alt={imageAlt} />
            </div>
          </div>
        )}
      </div>
    )}
    
    {layout === 'stacked' && (
      <div class="feature-stacked-layout">
        <div class="feature-header">
          {tagline && (
            <div class="feature-tagline">
              {tagline}
            </div>
          )}
          
          {title && (
            <h2 class="feature-title">
              {title}
            </h2>
          )}
          
          {description && (
            <p class="feature-description">
              {description}
            </p>
          )}
        </div>
        
        {image && (
          <div class="feature-image-container">
            <div class="feature-image">
              <img src={image} alt={imageAlt} />
            </div>
          </div>
        )}
        
        <div class="feature-content-slot">
          <slot />
        </div>
      </div>
    )}
    
    {layout === 'centered' && (
      <div class="feature-centered-layout">
        <div class="feature-header">
          {tagline && (
            <div class="feature-tagline">
              {tagline}
            </div>
          )}
          
          {title && (
            <h2 class="feature-title">
              {title}
            </h2>
          )}
          
          {description && (
            <p class="feature-description">
              {description}
            </p>
          )}
        </div>
        
        <div class="feature-content-slot">
          <slot />
        </div>
        
        {image && (
          <div class="feature-image-container">
            <div class="feature-image">
              <img src={image} alt={imageAlt} />
            </div>
          </div>
        )}
      </div>
    )}
  </div>
</section>

<style>
  .feature-section {
    position: relative;
  }
  
  /* Variants */
  .feature-section.variant-bordered {
    border-top: 1px solid hsl(var(--border));
  }
  
  .feature-section.variant-background {
    background: hsl(var(--muted));
  }
  
  /* Split Layout */
  .feature-split-layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
    max-width: 1280px;
    margin: 0 auto;
  }
  
  .feature-content {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  /* Stacked Layout */
  .feature-stacked-layout {
    display: flex;
    flex-direction: column;
    gap: 3rem;
    max-width: 1024px;
    margin: 0 auto;
    text-align: center;
  }
  
  /* Centered Layout */
  .feature-centered-layout {
    display: flex;
    flex-direction: column;
    gap: 3rem;
    max-width: 768px;
    margin: 0 auto;
    text-align: center;
  }
  
  .feature-header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  /* Typography */
  .feature-tagline {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
    background: hsl(var(--muted));
    color: hsl(var(--muted-foreground));
    border: 1px solid hsl(var(--border));
    width: fit-content;
  }
  
  .feature-centered-layout .feature-tagline,
  .feature-stacked-layout .feature-tagline {
    align-self: center;
  }
  
  .feature-title {
    font-size: 2.25rem;
    font-weight: 700;
    line-height: 1.2;
    color: hsl(var(--foreground));
    margin: 0;
  }
  
  .feature-description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: hsl(var(--muted-foreground));
    margin: 0;
  }
  
  /* Image Styling */
  .feature-image-container {
    position: relative;
  }
  
  .feature-image {
    position: relative;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
  
  .feature-image img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }
  
  .feature-image:hover img {
    transform: scale(1.02);
  }
  
  /* Content Slot */
  .feature-content-slot {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  /* Responsive Design */
  @media (max-width: 1024px) {
    .feature-split-layout {
      grid-template-columns: 1fr;
      gap: 3rem;
      text-align: center;
    }
    
    .feature-content {
      order: 1 !important;
    }
    
    .feature-image-container {
      order: 2 !important;
    }
    
    .feature-tagline {
      align-self: center;
    }
  }
  
  @media (max-width: 768px) {
    .feature-split-layout,
    .feature-stacked-layout,
    .feature-centered-layout {
      gap: 2rem;
    }
    
    .feature-title {
      font-size: 1.875rem;
    }
    
    .feature-description {
      font-size: 1rem;
    }
    
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
  }
  
  @media (max-width: 640px) {
    .feature-title {
      font-size: 1.5rem;
    }
    
    .feature-section .container {
      padding-top: 3rem;
      padding-bottom: 3rem;
    }
  }
  
  /* Global slot content styling */
  .feature-content-slot :global(ul) {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .feature-content-slot :global(li) {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    color: hsl(var(--muted-foreground));
  }
  
  .feature-content-slot :global(li::before) {
    content: "âœ“";
    color: hsl(var(--primary));
    font-weight: 600;
    flex-shrink: 0;
  }
  
  .feature-content-slot :global(.feature-button) {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease;
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    border: 1px solid hsl(var(--primary));
    width: fit-content;
  }
  
  .feature-content-slot :global(.feature-button:hover) {
    background: hsl(var(--primary) / 0.9);
    transform: translateY(-1px);
  }
  
  .feature-content-slot :global(.feature-button-secondary) {
    background: transparent;
    color: hsl(var(--foreground));
    border: 1px solid hsl(var(--border));
  }
  
  .feature-content-slot :global(.feature-button-secondary:hover) {
    background: hsl(var(--muted));
  }
</style>
