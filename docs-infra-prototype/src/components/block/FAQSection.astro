---
interface FAQItem {
  question: string;
  answer: string;
  id?: string;
}

interface Props {
  title?: string;
  tagline?: string;
  description?: string;
  faqs: FAQItem[];
  layout?: 'single' | 'two-column';
  variant?: 'default' | 'bordered' | 'minimal';
  allowMultiple?: boolean;
  className?: string;
}

const { 
  title = "Frequently asked questions",
  tagline = "FAQ",
  description = "We've compiled the most important information to help you get the most out of your experience. Can't find what you're looking for? Contact us.",
  faqs = [],
  layout = 'single',
  variant = 'default',
  allowMultiple = false,
  className = '',
} = Astro.props;

const sectionClasses = [
  'faq-section',
  `layout-${layout}`,
  `variant-${variant}`,
  className
].filter(Boolean).join(' ');

// Generate unique IDs for FAQ items
const faqsWithIds = faqs.map((faq, index) => ({
  ...faq,
  id: faq.id || `faq-${index}`
}));
---

<section class={sectionClasses}>
  <div class="container mx-auto px-6 py-16 lg:py-24">
    <!-- Section Header -->
    <div class="faq-header">
      {tagline && (
        <div class="faq-tagline">
          {tagline}
        </div>
      )}
      
      {title && (
        <h2 class="faq-title">
          {title}
        </h2>
      )}
      
      {description && (
        <p class="faq-description">
          {description}
        </p>
      )}
    </div>

    <!-- FAQ Items -->
    {faqsWithIds.length > 0 && (
      <div class="faq-container">
        {layout === 'two-column' && (
          <div class="faq-columns">
            <div class="faq-column">
              {faqsWithIds.filter((_, index) => index % 2 === 0).map((faq) => (
                <div class="faq-item" data-faq-id={faq.id}>
                  <button class="faq-question" aria-expanded="false" aria-controls={`answer-${faq.id}`}>
                    <span class="question-text">{faq.question}</span>
                    <svg class="faq-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                  <div class="faq-answer" id={`answer-${faq.id}`}>
                    <div class="answer-content">
                      <p>{faq.answer}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <div class="faq-column">
              {faqsWithIds.filter((_, index) => index % 2 === 1).map((faq) => (
                <div class="faq-item" data-faq-id={faq.id}>
                  <button class="faq-question" aria-expanded="false" aria-controls={`answer-${faq.id}`}>
                    <span class="question-text">{faq.question}</span>
                    <svg class="faq-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                  <div class="faq-answer" id={`answer-${faq.id}`}>
                    <div class="answer-content">
                      <p>{faq.answer}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {layout === 'single' && (
          <div class="faq-list">
            {faqsWithIds.map((faq) => (
              <div class="faq-item" data-faq-id={faq.id}>
                <button class="faq-question" aria-expanded="false" aria-controls={`answer-${faq.id}`}>
                  <span class="question-text">{faq.question}</span>
                  <svg class="faq-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                <div class="faq-answer" id={`answer-${faq.id}`}>
                  <div class="answer-content">
                    <p>{faq.answer}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    )}
    
    <!-- Custom slot for additional content -->
    <div class="faq-extra">
      <slot />
    </div>
  </div>
</section>

<script>
  // FAQ Accordion functionality
  document.addEventListener('DOMContentLoaded', function() {
    const faqItems = document.querySelectorAll('.faq-item');
    const allowMultiple = document.querySelector('.faq-section')?.dataset.allowMultiple === 'true';
    
    faqItems.forEach(item => {
      const question = item.querySelector('.faq-question');
      const answer = item.querySelector('.faq-answer');
      
      if (question && answer) {
        question.addEventListener('click', () => {
          const isExpanded = question.getAttribute('aria-expanded') === 'true';
          
          // Close other items if allowMultiple is false
          if (!allowMultiple && !isExpanded) {
            faqItems.forEach(otherItem => {
              if (otherItem !== item) {
                const otherQuestion = otherItem.querySelector('.faq-question');
                const otherAnswer = otherItem.querySelector('.faq-answer');
                if (otherQuestion && otherAnswer) {
                  otherQuestion.setAttribute('aria-expanded', 'false');
                  otherAnswer.style.maxHeight = '0';
                  otherItem.classList.remove('expanded');
                }
              }
            });
          }
          
          // Toggle current item
          if (isExpanded) {
            question.setAttribute('aria-expanded', 'false');
            answer.style.maxHeight = '0';
            item.classList.remove('expanded');
          } else {
            question.setAttribute('aria-expanded', 'true');
            answer.style.maxHeight = answer.scrollHeight + 'px';
            item.classList.add('expanded');
          }
        });
      }
    });
  });
</script>

<style>
  .faq-section {
    background: hsl(var(--background));
    color: hsl(var(--foreground));
  }
  
  .faq-section[data-allow-multiple="true"] {
    --allow-multiple: true;
  }
  
  /* Header Styles */
  .faq-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: 1.5rem;
    margin-bottom: 4rem;
    max-width: 768px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .faq-tagline {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
    background: hsl(var(--muted));
    color: hsl(var(--muted-foreground));
    border: 1px solid hsl(var(--border));
  }
  
  .faq-title {
    font-size: 2.5rem;
    font-weight: 700;
    line-height: 1.2;
    color: hsl(var(--foreground));
    margin: 0;
  }
  
  .faq-description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: hsl(var(--muted-foreground));
    margin: 0;
  }
  
  /* FAQ Container */
  .faq-container {
    max-width: 768px;
    margin: 0 auto;
  }
  
  .layout-two-column .faq-container {
    max-width: 1024px;
  }
  
  .faq-columns {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }
  
  .faq-column {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .faq-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  /* FAQ Item Styles */
  .faq-item {
    border-radius: 0.75rem;
    overflow: hidden;
    transition: all 0.2s ease;
  }
  
  .variant-default .faq-item {
    background: hsl(var(--card));
    border: 1px solid hsl(var(--border));
  }
  
  .variant-bordered .faq-item {
    background: transparent;
    border: 1px solid hsl(var(--border));
  }
  
  .variant-minimal .faq-item {
    background: transparent;
    border: none;
    border-bottom: 1px solid hsl(var(--border));
    border-radius: 0;
  }
  
  .faq-item:hover {
    background: hsl(var(--muted) / 0.5);
  }
  
  .variant-minimal .faq-item:hover {
    background: transparent;
  }
  
  /* FAQ Question */
  .faq-question {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    background: none;
    border: none;
    font-size: 1rem;
    font-weight: 600;
    color: hsl(var(--foreground));
    text-align: left;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .variant-minimal .faq-question {
    padding: 1rem 0;
  }
  
  .faq-question:hover {
    color: hsl(var(--primary));
  }
  
  .question-text {
    flex: 1;
    line-height: 1.5;
  }
  
  .faq-icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-left: 1rem;
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }
  
  .faq-item.expanded .faq-icon {
    transform: rotate(180deg);
  }
  
  /* FAQ Answer */
  .faq-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }
  
  .answer-content {
    padding: 0 1.5rem 1.5rem;
    color: hsl(var(--muted-foreground));
    line-height: 1.6;
  }
  
  .variant-minimal .answer-content {
    padding: 0 0 1rem;
  }
  
  .answer-content p {
    margin: 0;
  }
  
  /* FAQ Extra */
  .faq-extra {
    margin-top: 4rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .faq-title {
      font-size: 2rem;
    }
    
    .faq-description {
      font-size: 1rem;
    }
    
    .faq-columns {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .faq-question {
      padding: 1rem;
      font-size: 0.9rem;
    }
    
    .variant-minimal .faq-question {
      padding: 0.75rem 0;
    }
    
    .answer-content {
      padding: 0 1rem 1rem;
    }
    
    .variant-minimal .answer-content {
      padding: 0 0 0.75rem;
    }
  }
  
  @media (max-width: 640px) {
    .faq-header {
      margin-bottom: 3rem;
    }
    
    .faq-title {
      font-size: 1.75rem;
    }
    
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
      padding-top: 3rem;
      padding-bottom: 3rem;
    }
  }
  
  /* Global slot content styling */
  .faq-extra :global(.faq-contact) {
    text-align: center;
    padding: 2rem;
    background: hsl(var(--muted) / 0.5);
    border-radius: 0.75rem;
    border: 1px solid hsl(var(--border));
  }
  
  .faq-extra :global(.faq-contact h3) {
    margin: 0 0 1rem;
    font-size: 1.25rem;
    font-weight: 600;
    color: hsl(var(--foreground));
  }
  
  .faq-extra :global(.faq-contact p) {
    margin: 0 0 1.5rem;
    color: hsl(var(--muted-foreground));
  }
  
  .faq-extra :global(.faq-contact-button) {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    text-decoration: none;
    border-radius: 0.5rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  .faq-extra :global(.faq-contact-button:hover) {
    background: hsl(var(--primary) / 0.9);
    transform: translateY(-1px);
  }
</style>
