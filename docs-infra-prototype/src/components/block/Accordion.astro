---
interface Props {
  label: string; // Required label property
  variant?: 'default' | 'bordered' | 'minimal';
  className?: string;
  id?: string;
  defaultExpanded?: boolean;
}

const { 
  label, // Required label
  variant = 'default',
  className = '',
  id,
  defaultExpanded = false,
} = Astro.props;

// Generate unique ID if not provided
const accordionId = id || `accordion-${Math.random().toString(36).substr(2, 9)}`;

const accordionClasses = [
  'accordion-item',
  `variant-${variant}`,
  'mt-3',
  className
].filter(Boolean).join(' ');
---

<div class={accordionClasses} data-accordion-id={accordionId}>
  <button 
    class="accordion-question" 
    aria-expanded={defaultExpanded ? 'true' : 'false'} 
    aria-controls={`answer-${accordionId}`}
  >
    <span class="question-text">{label}</span>
    <svg class="accordion-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>
  <div 
    class="accordion-answer" 
    id={`answer-${accordionId}`}
    style={defaultExpanded ? 'max-height: none;' : 'max-height: 0;'}
  >
    <slot />
  </div>
</div>

<script>
  // Accordion functionality
  document.addEventListener('DOMContentLoaded', function() {
    const accordionItems = document.querySelectorAll('.accordion-item');
    
    accordionItems.forEach(item => {
      const question = item.querySelector('.accordion-question');
      const answer = item.querySelector('.accordion-answer');
      
      if (question && answer) {
        // Set initial state for expanded items
        const isExpanded = question.getAttribute('aria-expanded') === 'true';
        if (isExpanded) {
          answer.style.maxHeight = answer.scrollHeight + 'px';
          item.classList.add('expanded');
        }
        
        question.addEventListener('click', () => {
          const currentlyExpanded = question.getAttribute('aria-expanded') === 'true';
          
          // Toggle current item
          if (currentlyExpanded) {
            question.setAttribute('aria-expanded', 'false');
            answer.style.maxHeight = '0';
            item.classList.remove('expanded');
          } else {
            question.setAttribute('aria-expanded', 'true');
            answer.style.maxHeight = answer.scrollHeight + 'px';
            item.classList.add('expanded');
          }
        });
      }
    });
  });
</script>

<style>
  /* Accordion Item Styles */
  .accordion-item {
    border-radius: 0.75rem;
    overflow: hidden;
    transition: all 0.2s ease;
    margin-bottom: 1rem;
  }
  
  .variant-default.accordion-item {
    background: hsl(var(--card));
    border: 1px solid hsl(var(--border));
  }
  
  .variant-bordered.accordion-item {
    background: transparent;
    border: 2px solid hsl(var(--border));
  }
  
  .variant-bordered.accordion-item:hover {
    border-color: hsl(var(--primary) / 0.5);
    background: hsl(var(--muted) / 0.1);
  }
  
  .variant-minimal.accordion-item {
    background: transparent;
    border: none;
    border-bottom: 1px solid hsl(var(--border));
    border-radius: 0;
  }
  
  .accordion-item:hover {
    background: hsl(var(--muted) / 0.5);
  }
  
  .variant-bordered.accordion-item:hover {
    border-color: hsl(var(--primary) / 0.5);
    background: hsl(var(--muted) / 0.1);
  }
  
  .variant-minimal.accordion-item:hover {
    background: transparent;
  }
  
  /* Accordion Question */
  .accordion-question {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    background: none;
    border: none;
    font-size: 1rem;
    font-weight: 600;
    color: hsl(var(--foreground));
    text-align: left;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .variant-minimal .accordion-question {
    padding: 1rem 0;
  }
  
  .accordion-question:hover {
    color: hsl(var(--primary));
  }
  
  .question-text {
    flex: 1;
    line-height: 1.5;
  }
  
  .accordion-icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-left: 1rem;
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }
  
  .accordion-item.expanded .accordion-icon {
    transform: rotate(180deg);
  }
  
  /* Accordion Answer */
  .accordion-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .accordion-question {
      padding: 1rem;
      font-size: 0.9rem;
    }
    
    .variant-minimal .accordion-question {
      padding: 0.75rem 0;
    }
  }
</style>
